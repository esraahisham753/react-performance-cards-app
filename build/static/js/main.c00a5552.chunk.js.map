{"version":3,"sources":["Card.js","AddButton.js","CornerButton.js","Summary.js","App.js","serviceWorker.js","index.js"],"names":["Card","React","memo","props","card","onDragStart","onDragEnd","onDoubleClick","onMouseDown","ev","clickOffset","x","clientX","parseFloat","currentTarget","style","left","y","clientY","top","console","log","onMouseUp","position","backgroundColor","padding","cursor","userSelect","key","id","label","oldCard","newCard","AddButton","onClick","height","width","borderRadius","bottom","right","fontSize","color","CornerButton","corner","setPosition","className","Summary","useState","cards","Object","values","time","distances","useMemo","calcDistances","max","min","forEach","currentCard","compareCard","distance","levenshtein","Math","keys","length","timeEnd","prevProps","newProps","AddModal","lazy","ModalLoader","positionCards","updatedCards","offset","App","setCards","dragCardInfo","setDragCardInfo","isAddOpen","setIsAddOpen","boardRef","useRef","boardSize","useComponentSize","showDialog","useCallback","useEffect","parsedCards","cardData","task","parseData","cardEls","map","dragOffset","clonedCards","handleDelete","ref","onMouseMove","pageY","pageX","fallback","isOpen","onClose","onAdd","cardText","uuid","v4","addCard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c00a5552.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Card = React.memo(function Card(props) {\n  \n    const { card, onDragStart, onDragEnd, onDoubleClick } = props;\n\n    return (\n      <div\n        onMouseDown={ev => {\n          const clickOffset = {\n            x: ev.clientX - parseFloat(ev.currentTarget.style.left),\n            y: ev.clientY - parseFloat(ev.currentTarget.style.top)\n          };\n          console.log(\"Calculated clickpffset\");\n          onDragStart(clickOffset);\n        }}\n        onMouseUp={onDragEnd}\n        onDoubleClick={onDoubleClick}\n        style={{\n          position: \"absolute\",\n          left: card.position.left,\n          top: card.position.top,\n          backgroundColor: \"#fff\",\n          padding: \"25px\",\n          cursor: \"move\",\n          userSelect: \"none\"\n        }}\n        key={card.id}\n      >\n        {card.label}\n      </div>\n    );\n  \n}, ({card: oldCard}, {card: newCard}) => oldCard.id === newCard.id &&\noldCard.position.left === newCard.position.left && \noldCard.position.top === newCard.position.top\n);\n","import React from \"react\";\n\nexport const AddButton = React.memo( ({onClick}) => {\n\n    return (\n      <button\n        onClick={onClick}\n        style={{\n          height: 100,\n          width: 100,\n          borderRadius: 50,\n          backgroundColor: \"#333\",\n          position: \"absolute\",\n          bottom: 100,\n          right: 100,\n          fontSize: 20,\n          color: \"#fff\",\n          cursor: \"pointer\"\n        }}\n      >\n        Add\n      </button>\n    );\n  })\n\n","import React from \"react\";\n\nexport function CornerButton({ corner, setPosition, position }) {\n  return (\n    <div onClick={() => setPosition(corner)} className={`arrow arrow-${corner} ${position === corner ? 'arrow-active' : ''}`} />\n  );\n}","import React, { useState, useMemo } from \"react\";\nimport levenshtein from \"levenshtein\";\nimport \"./Summary.css\";\nimport { CornerButton } from \"./CornerButton\";\n\nexport const Summary = React.memo(\n  function Summary(props) {\n    const [position, setPosition] = useState(\"top-right\");\n\n    const cards = Object.values(props.cards);\n\n\n    console.time('calc-distances')\n    const distances = useMemo(() => {\n      const calcDistances = { max: 0, min: 100000 };\n      cards.forEach(currentCard => {\n        cards.forEach(compareCard => {\n          if (compareCard === currentCard) {\n            return;\n          }\n          const distance = levenshtein(currentCard.label, compareCard.label);\n  \n          calcDistances.max = Math.max(calcDistances.max, distance);\n          calcDistances.min = Math.min(calcDistances.min, distance);\n        });\n      });\n      return calcDistances;\n    }, [Object.keys(props.cards).length]);\n   \n    console.timeEnd('calc-distances')\n\n    return (\n      <div className={`Summary Summary-${position}`}>\n        <div>You have {Object.keys(props.cards).length} cards!</div>\n        <div>Max difference in labels: {distances.max}</div>\n        <div>Min difference in labels: {distances.min}</div>\n\n        <CornerButton setPosition={setPosition} corner=\"top-right\" position={position} />\n        <CornerButton setPosition={setPosition} corner=\"top-left\" position={position} />\n        <CornerButton setPosition={setPosition} corner=\"bottom-left\" position={position} />\n        <CornerButton setPosition={setPosition} corner=\"bottom-right\" position={position} />\n      </div>\n    );\n  },\n  (prevProps, newProps) =>\n    Object.values(prevProps.cards).length ===\n    Object.values(newProps.cards).length\n);","import React, { useRef, useState, useEffect, useCallback, lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport useComponentSize from \"@rehooks/component-size\";\nimport cardData from \"./data.json\";\nimport uuid from \"uuid\";\nimport { Card } from \"./Card\";\nimport { AddButton } from \"./AddButton\";\nimport { Summary } from \"./Summary\";\nconst AddModal = lazy(() => import(\"./AddModal\"));\n\nconst ModalLoader = () => <div className=\"modal-loader\">Loading...</div>;\n\nfunction positionCards(cards, width, height) {\n  const updatedCards = {};\n\n  Object.values(cards).forEach(\n    card =>\n      (updatedCards[card.id] = {\n        ...card,\n        position: {\n          left: card.offset.x + width * 0.5,\n          top: card.offset.y + height * 0.5\n        }\n      })\n  );\n\n  return updatedCards;\n}\n\nfunction parseData() {\n  const cards = {};\n\n  cardData.forEach(task => {\n    cards[task.id] = task;\n  });\n\n  return cards;\n}\n\nfunction addCard(cards, label) {\n  const id = uuid.v4();\n\n  return {\n    ...cards,\n    [id]: {\n      id,\n      label,\n      offset: {\n        x: 0,\n        y: 0\n      }\n    }\n  };\n}\n\nfunction App() {\n  const [cards, setCards] = useState({});\n  const [dragCardInfo, setDragCardInfo] = useState(null);\n  const [isAddOpen, setIsAddOpen] = useState(false);\n  const boardRef = useRef(null);\n  const boardSize = useComponentSize(boardRef);\n  const { height, width } = boardSize;\n\n  const showDialog = useCallback(() => setIsAddOpen(true), []);\n\n  useEffect(() => {\n    if (height && width) {\n      const parsedCards = parseData();\n      setCards(positionCards(parsedCards, width, height));\n    }\n  }, [height, width]);\n\n  function handleDelete(card) {\n    const clonedCards = { ...cards };\n    delete clonedCards[card.id];\n\n    setCards(clonedCards);\n  }\n\n  const cardEls = Object.values(cards).map(card => (\n    <Card\n      card={card}\n      boardSize={boardSize}\n      key={card.id}\n      onDragStart={dragOffset => setDragCardInfo({ card, dragOffset })}\n      onDragEnd={() => setDragCardInfo(null)}\n      onDoubleClick={() => handleDelete(card)}\n    />\n  ));\n\n  return (\n    <div\n      className=\"App\"\n      ref={boardRef}\n      onMouseMove={ev => {\n        if (!dragCardInfo) {\n          return;\n        }\n\n        const { card, dragOffset } = dragCardInfo;\n\n        const updatedCards = {\n          ...cards,\n          [card.id]: {\n            ...card,\n            position: {\n              top: ev.pageY - dragOffset.y,\n              left: ev.pageX - dragOffset.x\n            }\n          }\n        };\n\n        setCards(updatedCards);\n      }}\n    >\n      {cardEls}\n      <Summary cards={cards} />\n      <AddButton onClick={showDialog} />\n      {isAddOpen && (\n        <Suspense fallback={<ModalLoader />}>\n          <AddModal\n          isOpen={isAddOpen}\n          onClose={() => setIsAddOpen(false)}\n          onAdd={cardText => {\n            const updatedCards = positionCards(\n              addCard(cards, cardText),\n              width,\n              height\n            );\n            setCards(updatedCards);\n          }}\n        />\n        </Suspense>\n      )}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"resize-observer-polyfill\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}